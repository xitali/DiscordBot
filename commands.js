const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const { commands: moderationCommands } = require('./moderation');

// Komenda /config do zmiany nazw kana≈Ç√≥w przez administrator√≥w
const configCommand = {
    data: new SlashCommandBuilder()
        .setName('config')
        .setDescription('Konfiguracja nazw kana≈Ç√≥w g≈Çosowych')
        .addSubcommand(subcommand =>
            subcommand
                .setName('name')
                .setDescription('Zmie≈Ñ nazwƒô kana≈Çu g≈Çosowego')
                .addStringOption(option =>
                    option.setName('old_name')
                        .setDescription('Stara nazwa kana≈Çu (bez [BF6])')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('new_name')
                        .setDescription('Nowa nazwa kana≈Çu (bez [BF6])')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('prefix')
                .setDescription('Zmie≈Ñ prefix kana≈Ç√≥w g≈Çosowych')
                .addStringOption(option =>
                    option.setName('new_prefix')
                        .setDescription('Nowy prefix (domy≈õlnie [BF6])')
                        .setRequired(true)))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),
    
    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === 'name') {
            await handleNameChange(interaction, client);
        } else if (subcommand === 'prefix') {
            await handlePrefixChange(interaction, client);
        }
    }
};

// Obs≈Çuga zmiany nazwy kana≈Çu
async function handleNameChange(interaction, client) {
    const oldName = interaction.options.getString('old_name');
    const newName = interaction.options.getString('new_name');
    
    try {
        // Znajd≈∫ kana≈Ç z podanƒÖ nazwƒÖ
        const channels = interaction.guild.channels.cache.filter(channel => 
            channel.type === 2 && // GuildVoice
            channel.name.includes(oldName) &&
            client.channelOwners.has(channel.id)
        );
        
        if (channels.size === 0) {
            return await interaction.reply({
                content: `‚ùå Nie znaleziono kana≈Çu g≈Çosowego zawierajƒÖcego nazwƒô: "${oldName}"`,
                ephemeral: true
            });
        }
        
        if (channels.size > 1) {
            const channelList = channels.map(ch => `‚Ä¢ ${ch.name}`).join('\n');
            return await interaction.reply({
                content: `‚ùå Znaleziono wiƒôcej ni≈º jeden kana≈Ç:\n${channelList}\n\nPodaj bardziej precyzyjnƒÖ nazwƒô.`,
                ephemeral: true
            });
        }
        
        const channel = channels.first();
        const currentPrefix = getChannelPrefix(channel.name);
        const newChannelName = `${currentPrefix} ${newName}`;
        
        await channel.setName(newChannelName);
        
        await interaction.reply({
            content: `‚úÖ Zmieniono nazwƒô kana≈Çu z "${channel.name}" na "${newChannelName}"`,
            ephemeral: true
        });
        
        console.log(`üîß Admin ${interaction.user.tag} zmieni≈Ç nazwƒô kana≈Çu: ${channel.name} -> ${newChannelName}`);
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas zmiany nazwy kana≈Çu:', error);
        await interaction.reply({
            content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany nazwy kana≈Çu.',
            ephemeral: true
        });
    }
}

// Obs≈Çuga zmiany prefiksu
async function handlePrefixChange(interaction, client) {
    const newPrefix = interaction.options.getString('new_prefix');
    
    try {
        // Zapisz nowy prefix w zmiennej ≈õrodowiskowej (tymczasowo w pamiƒôci)
        process.env.CHANNEL_PREFIX = newPrefix;
        
        await interaction.reply({
            content: `‚úÖ Zmieniono prefix kana≈Ç√≥w na: "${newPrefix}"\n‚ö†Ô∏è Zmiana dotyczy tylko nowo tworzonych kana≈Ç√≥w.`,
            ephemeral: true
        });
        
        console.log(`üîß Admin ${interaction.user.tag} zmieni≈Ç prefix kana≈Ç√≥w na: ${newPrefix}`);
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas zmiany prefiksu:', error);
        await interaction.reply({
            content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany prefiksu.',
            ephemeral: true
        });
    }
}

// Komenda /channel do zarzƒÖdzania w≈Çasnym kana≈Çem
const channelCommand = {
    data: new SlashCommandBuilder()
        .setName('channel')
        .setDescription('ZarzƒÖdzaj swoim kana≈Çem g≈Çosowym')
        .addSubcommand(subcommand =>
            subcommand
                .setName('limit')
                .setDescription('Ustaw limit os√≥b w kanale (2-5)')
                .addIntegerOption(option =>
                    option.setName('liczba')
                        .setDescription('Liczba os√≥b (2-5)')
                        .setRequired(true)
                        .setMinValue(2)
                        .setMaxValue(5)
                        .addChoices(
                            { name: '2 osoby', value: 2 },
                            { name: '3 osoby', value: 3 },
                            { name: '4 osoby', value: 4 },
                            { name: '5 os√≥b', value: 5 }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('rename')
                .setDescription('Zmie≈Ñ nazwƒô swojego kana≈Çu')
                .addStringOption(option =>
                    option.setName('nazwa')
                        .setDescription('Nowa nazwa kana≈Çu (bez prefiksu)')
                        .setRequired(true)
                        .setMaxLength(50))),
    
    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();
        
        // Sprawd≈∫ czy u≈ºytkownik ma sw√≥j kana≈Ç
        const userChannelId = client.createdChannels.get(interaction.user.id);
        if (!userChannelId) {
            return await interaction.reply({
                content: '‚ùå Nie masz utworzonego kana≈Çu g≈Çosowego. Do≈ÇƒÖcz do kana≈Çu trigger, aby go utworzyƒá.',
                ephemeral: true
            });
        }
        
        const channel = interaction.guild.channels.cache.get(userChannelId);
        if (!channel) {
            return await interaction.reply({
                content: '‚ùå Tw√≥j kana≈Ç g≈Çosowy nie zosta≈Ç znaleziony.',
                ephemeral: true
            });
        }
        
        if (subcommand === 'limit') {
            await handleChannelLimit(interaction, channel);
        } else if (subcommand === 'rename') {
            await handleChannelRename(interaction, channel);
        }
    }
};

// Obs≈Çuga zmiany limitu kana≈Çu
async function handleChannelLimit(interaction, channel) {
    const limit = interaction.options.getInteger('liczba');
    
    // Walidacja - tylko warto≈õci 2-5 sƒÖ dozwolone
    if (limit < 2 || limit > 5) {
        return await interaction.reply({
            content: '‚ùå Limit mo≈ºe byƒá tylko w zakresie 2-5 os√≥b.',
            ephemeral: true
        });
    }
    
    try {
        await channel.setUserLimit(limit);
        
        await interaction.reply({
            content: `‚úÖ Ustawiono limit kana≈Çu na: ${limit} os√≥b`,
            ephemeral: true
        });
        
        console.log(`üîß ${interaction.user.tag} ustawi≈Ç limit kana≈Çu ${channel.name} na: ${limit}`);
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas zmiany limitu kana≈Çu:', error);
        await interaction.reply({
            content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany limitu kana≈Çu.',
            ephemeral: true
        });
    }
}

// Obs≈Çuga zmiany nazwy kana≈Çu przez w≈Ça≈õciciela
async function handleChannelRename(interaction, channel) {
    const newName = interaction.options.getString('nazwa');
    
    try {
        const currentPrefix = getChannelPrefix(channel.name);
        const newChannelName = `${currentPrefix} ${newName}`;
        
        await channel.setName(newChannelName);
        
        await interaction.reply({
            content: `‚úÖ Zmieniono nazwƒô kana≈Çu na: "${newChannelName}"`,
            ephemeral: true
        });
        
        console.log(`üîß ${interaction.user.tag} zmieni≈Ç nazwƒô swojego kana≈Çu na: ${newChannelName}`);
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas zmiany nazwy kana≈Çu:', error);
        await interaction.reply({
            content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany nazwy kana≈Çu.',
            ephemeral: true
        });
    }
}

// Komenda /auth do konfiguracji reaction roles
const authCommand = {
    data: new SlashCommandBuilder()
        .setName('auth')
        .setDescription('Konfiguruj reaction roles - przydzielanie r√≥l za reakcje')
        .addStringOption(option =>
            option.setName('kanal')
                .setDescription('Nazwa kana≈Çu tekstowego')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('wiadomosc')
                .setDescription('ID wiadomo≈õci (message:id)')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('emoji')
                .setDescription('Emoji do reakcji (np. üëç lub :custom_emoji:)')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('rola')
                .setDescription('Nazwa roli do przydzielenia')
                .setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),

    async execute(interaction, client) {
        const channelName = interaction.options.getString('kanal');
        const messageId = interaction.options.getString('wiadomosc');
        const emoji = interaction.options.getString('emoji');
        const roleName = interaction.options.getString('rola');

        return await handleAuthSetup(interaction, client, channelName, messageId, emoji, roleName);
    }
};

async function handleAuthSetup(interaction, client, channelName, messageId, emoji, roleName) {
    try {
        // Znajd≈∫ kana≈Ç po nazwie
        const channel = interaction.guild.channels.cache.find(ch => 
            ch.name === channelName && ch.type === 0 // GuildText
        );
        
        if (!channel) {
            return await interaction.reply({
                content: `‚ùå Nie znaleziono kana≈Çu tekstowego o nazwie: ${channelName}`,
                ephemeral: true
            });
        }

        // Sprawd≈∫ czy wiadomo≈õƒá istnieje
        let message;
        try {
            message = await channel.messages.fetch(messageId);
        } catch (error) {
            return await interaction.reply({
                content: `‚ùå Nie znaleziono wiadomo≈õci o ID: ${messageId} w kanale ${channelName}`,
                ephemeral: true
            });
        }

        // Znajd≈∫ rolƒô po nazwie
        const role = interaction.guild.roles.cache.find(r => r.name === roleName);
        if (!role) {
            return await interaction.reply({
                content: `‚ùå Nie znaleziono roli o nazwie: ${roleName}`,
                ephemeral: true
            });
        }

        // Sprawd≈∫ uprawnienia bota
        if (!interaction.guild.members.me.permissions.has(PermissionFlagsBits.ManageRoles)) {
            return await interaction.reply({
                content: '‚ùå Bot nie ma uprawnie≈Ñ do zarzƒÖdzania rolami.',
                ephemeral: true
            });
        }

        // Sprawd≈∫ czy bot mo≈ºe przydzieliƒá tƒô rolƒô
        if (role.position >= interaction.guild.members.me.roles.highest.position) {
            return await interaction.reply({
                content: `‚ùå Nie mogƒô przydzieliƒá roli ${roleName} - jest wy≈ºej w hierarchii ni≈º moje role.`,
                ephemeral: true
            });
        }

        // Dodaj reakcjƒô do wiadomo≈õci
        try {
            await message.react(emoji);
        } catch (error) {
            return await interaction.reply({
                content: `‚ùå Nie mogƒô dodaƒá reakcji ${emoji}. Sprawd≈∫ czy emoji jest poprawne.`,
                ephemeral: true
            });
        }

        // Zapisz konfiguracjƒô reaction role
        client.reactionRoles.set(messageId, {
            channelId: channel.id,
            emoji: emoji,
            roleId: role.id,
            roleName: roleName
        });

        await interaction.reply({
            content: `‚úÖ Skonfigurowano reaction role:\n` +
                    `üìç Kana≈Ç: ${channel.name}\n` +
                    `üìù Wiadomo≈õƒá: ${messageId}\n` +
                    `üòÄ Emoji: ${emoji}\n` +
                    `üé≠ Rola: ${roleName}`,
            ephemeral: true
        });

        console.log(`üîß ${interaction.user.tag} skonfigurowa≈Ç reaction role: ${emoji} -> ${roleName} w ${channel.name}`);

    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas konfiguracji reaction role:', error);
        await interaction.reply({
            content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas konfiguracji reaction role.',
            ephemeral: true
        });
    }
}

// Komenda /clear do masowego usuwania wiadomo≈õci
const clearCommand = {
    data: new SlashCommandBuilder()
        .setName('clear')
        .setDescription('Usu≈Ñ okre≈õlonƒÖ liczbƒô wiadomo≈õci z kana≈Çu')
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('Liczba wiadomo≈õci do usuniƒôcia (1-100)')
                .setRequired(true)
                .setMinValue(1)
                .setMaxValue(100))
        .addUserOption(option =>
            option.setName('user')
                .setDescription('Usu≈Ñ wiadomo≈õci tylko od tego u≈ºytkownika')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages),
    
    async execute(interaction, client) {
        const amount = interaction.options.getInteger('amount');
        const targetUser = interaction.options.getUser('user');
        
        try {
            await interaction.deferReply({ ephemeral: true });
            
            // Pobierz wiadomo≈õci z kana≈Çu
            const messages = await interaction.channel.messages.fetch({ limit: 100 });
            
            let messagesToDelete;
            if (targetUser) {
                // Filtruj wiadomo≈õci od okre≈õlonego u≈ºytkownika
                messagesToDelete = messages.filter(msg => msg.author.id === targetUser.id).first(amount);
            } else {
                // Pobierz okre≈õlonƒÖ liczbƒô najnowszych wiadomo≈õci
                messagesToDelete = messages.first(amount);
            }
            
            if (messagesToDelete.length === 0) {
                return await interaction.editReply({
                    content: '‚ùå Nie znaleziono wiadomo≈õci do usuniƒôcia.'
                });
            }
            
            // Usu≈Ñ wiadomo≈õci
            const deleted = await interaction.channel.bulkDelete(messagesToDelete, true);
            
            // Wy≈õlij potwierdzenie
            const userText = targetUser ? ` od u≈ºytkownika ${targetUser.tag}` : '';
            await interaction.editReply({
                content: `‚úÖ Usuniƒôto ${deleted.size} wiadomo≈õci${userText}.`
            });
            
            // Wy≈õlij log do kana≈Çu moderacji
            await sendLogToModerationChannel(client, {
                title: 'üóëÔ∏è Masowe usuwanie wiadomo≈õci',
                description: `**Moderator:** ${interaction.user.tag}\n**Kana≈Ç:** ${interaction.channel}\n**Liczba usuniƒôtych:** ${deleted.size}${targetUser ? `\n**Cel:** ${targetUser.tag}` : ''}`,
                color: 0xFF6B6B,
                timestamp: new Date()
            });
            
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd podczas usuwania wiadomo≈õci:', error);
            
            let errorMessage = '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas usuwania wiadomo≈õci.';
            if (error.code === 50034) {
                errorMessage = '‚ùå Nie mo≈ºna usunƒÖƒá wiadomo≈õci starszych ni≈º 14 dni.';
            } else if (error.code === 50013) {
                errorMessage = '‚ùå Brak uprawnie≈Ñ do usuwania wiadomo≈õci.';
            }
            
            await interaction.editReply({ content: errorMessage });
        }
    }
};

// Funkcja pomocnicza do wyciƒÖgniƒôcia prefiksu z nazwy kana≈Çu
function getChannelPrefix(channelName) {
    const match = channelName.match(/^(\[.*?\])/); // Znajd≈∫ tekst w nawiasach kwadratowych na poczƒÖtku
    return match ? match[1] : (process.env.CHANNEL_PREFIX || '[BF6]');
}

module.exports = {
    commands: [configCommand, channelCommand, authCommand, clearCommand, ...moderationCommands],
    getChannelPrefix
};